import React, { useState, useEffect, useContext } from "react";
import { useNavigate } from "react-router-dom";
import DevicesService from "../services/devices.service";
import Device from "./Device";
import AuthService from "../services/auth.service";
import NotificationModal from "./NotificationModal";
import { WebsocketContext } from "../contexts/WebsocketContext";

const Home = () => {
  const navigate = useNavigate();
  const currentUser = AuthService.getCurrentUser();
  const [devices, setDevices] = useState([]);
  const [cart, setCart] = useState([]);
  const [showNotifModal, setShowNotifModal] = useState(false);
  const [notifModalData, setNotifModalData] = useState({});
  const socket = useContext(WebsocketContext);

  useEffect(() => {
    if (!currentUser) {
      return navigate("/login");
    }

    DevicesService.getDevices().then((response) => {
      setDevices(response.data.devices);
    });

    socket.on("connect", () => {
      console.log("Connected!");
    });
    socket.on("device-update", (message) => {
      console.log("device-update event received!", message);
      setNotifModalData(message.updatedDevice);
      setShowNotifModal(true);
    });

    return () => {
      console.log("Unregistering Events...");
      socket.off("connect");
      socket.off("device-update");
    };
  }, []);

  const closeNotifModal = async () => {
    setNotifModalData({});
    setShowNotifModal(false);

    const getRes = await DevicesService.getDevices();
    setDevices(getRes.data.devices);

    const newCart = cart.filter((cartEl) => {
      const dev = devices.find((d) => d._id === cartEl._id);
      return dev && dev.quantity && dev.quantity - cartEl.count >= 0;
    });
    setCart(newCart);
  };

  const addToCart = (_id) => {
    const index = cart.findIndex((c) => c._id === _id);
    const device = devices.find((d) => d._id === _id);

    if (index < 0) {
      setCart([...cart, { _id, count: 1 }]);
    } else if (device.quantity - cart[index].count > 0) {
      cart[index].count++;
      setCart([...cart]);
    }
  };

  const removeFromCart = (_id) => {
    const index = cart.findIndex((c) => c._id === _id);

    if (index >= 0) {
      cart[index].count--;
      setCart(cart.filter((c) => c.count));
    }
  };

  const getTotalItemsCount = () => {
    return cart.reduce((sum, el) => {
      sum += el.count;
      return sum;
    }, 0);
  };

  const buy = async () => {
    if (!cart.length) {
      return;
    }

    const buyRes = await DevicesService.buyDevices(cart);

    socket.emit("buy-device", { token: currentUser.token, data: buyRes.data });
    setCart([]);

    const getRes = await DevicesService.getDevices();
    setDevices(getRes.data.devices);
  };

  return (
    <div>
      {currentUser && (
        <div>
          <div className="container">
            <div className="row">
              <div className="col-md-6">
                <div className="row">
                  <div className="col-md-5 align-self-start">
                    <strong>Email: {currentUser.email}</strong>
                  </div>
                  <div className="col-md-6 align-self-center">
                    <div className="row">
                      <div className="col-md-5 align-self-end">
                        <strong>Total in cart:</strong>
                      </div>
                      <div className="col-md-4" style={{ borderStyle: "solid" }}>
                        <span className="text-danger">{getTotalItemsCount()} item(s)</span>
                      </div>
                    </div>
                  </div>
                  <div className="col-md-1 align-self-end">
                    <button onClick={buy} className="btn btn-primary">
                      Buy
                    </button>
                  </div>
                </div>
              </div>
              <div className="col-md-2"></div>
            </div>
          </div>
          <hr />
          <div>
            {devices.map((device, i) => {
              return <Device key={i} device={{ index: ++i, ...device }} cart={cart} addToCart={addToCart} removeFromCart={removeFromCart} />;
            })}
          </div>

          <NotificationModal show={showNotifModal} onClose={() => closeNotifModal()} data={notifModalData} />
        </div>
      )}
    </div>
  );
};

export default Home;
