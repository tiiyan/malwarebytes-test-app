import bodyParser from "body-parser";
import express from "express";
import http from "http";
import morgan from "morgan";
import cors from "cors";
import logger from "./helpers/logger.js";
import config from "./config.js";
import errorHandler from "./helpers/errorHandler.js";
import initDb from "./db/mongo.js";
import passport from "passport";
import jwt from "jsonwebtoken";
import authRouter from "./api/auth/auth.router.js";
import devicesRouter from "./api/device/device.router.js";
import { Server as SocketIO } from "socket.io";

import "./api/auth/auth.middleware.js";

const app = express();
const httpServer = http.createServer(app);

const io = new SocketIO(httpServer, {
  cors: {
    origin: "http://localhost:3000",
  },
});

io.on("connection", (socket) => {
  logger.info("New WS client connected.");

  socket.on("disconnect", () => {
    logger.info("WS client closed.");
  });

  socket.use(([event, message], next) => {
    const isValid = jwt.verify((message || {}).token, config.JWT.TOKEN_SECRET);

    if (!message || !isValid) {
      return next(new Error("Unauthorized event."));
    }

    next();
  });

  socket.on("buy-device", (message) => {
    socket.broadcast.emit("device-update", message.data);
  });

  socket.on("error", (err) => {
    if (err && err.message === "Unauthorized event.") {
      socket.disconnect();
    }
  });
});

initDb();

app.use(cors());
app.use(morgan("combined"));
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json({ type: "application/json" }));

app.use("/", authRouter);
app.use("/devices", passport.authenticate("jwt", { session: false }), devicesRouter);

httpServer.listen(config.APP.PORT, () => {
  logger.info(`Server ${process.pid} started on port ${config.APP.PORT}`);
});

app.use(errorHandler);
process.on("unhandledRejection", (reason, promise) => {
  throw reason;
});

process.on("uncaughtException", (error) => {
  logger.error(`Uncaught Exception: ${500} - ${error.message}, Stack: ${error.stack}`);
});
